// Code generated by bpf2go; DO NOT EDIT.
//go:build mips || mips64 || ppc64 || s390x

package generated

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

type TCBpfTcEvent struct {
	Saddr uint32
	Sport uint16
	_     [2]byte
	Daddr uint32
	Dport uint16
	_     [2]byte
}

type TCBpfTcIpport struct {
	Addr uint32
	Port uint16
	_    [2]byte
}

// LoadTCBpf returns the embedded CollectionSpec for TCBpf.
func LoadTCBpf() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_TCBpfBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load TCBpf: %w", err)
	}

	return spec, err
}

// LoadTCBpfObjects loads TCBpf and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*TCBpfObjects
//	*TCBpfPrograms
//	*TCBpfMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func LoadTCBpfObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := LoadTCBpf()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// TCBpfSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type TCBpfSpecs struct {
	TCBpfProgramSpecs
	TCBpfMapSpecs
}

// TCBpfSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type TCBpfProgramSpecs struct {
	TcDurdurDropFunc *ebpf.ProgramSpec `ebpf:"tc_durdur_drop_func"`
}

// TCBpfMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type TCBpfMapSpecs struct {
	DropToAddrs       *ebpf.MapSpec `ebpf:"drop_to_addrs"`
	DropToIpport      *ebpf.MapSpec `ebpf:"drop_to_ipport"`
	DropToPorts       *ebpf.MapSpec `ebpf:"drop_to_ports"`
	TcEventReportArea *ebpf.MapSpec `ebpf:"tc_event_report_area"`
}

// TCBpfObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to LoadTCBpfObjects or ebpf.CollectionSpec.LoadAndAssign.
type TCBpfObjects struct {
	TCBpfPrograms
	TCBpfMaps
}

func (o *TCBpfObjects) Close() error {
	return _TCBpfClose(
		&o.TCBpfPrograms,
		&o.TCBpfMaps,
	)
}

// TCBpfMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to LoadTCBpfObjects or ebpf.CollectionSpec.LoadAndAssign.
type TCBpfMaps struct {
	DropToAddrs       *ebpf.Map `ebpf:"drop_to_addrs"`
	DropToIpport      *ebpf.Map `ebpf:"drop_to_ipport"`
	DropToPorts       *ebpf.Map `ebpf:"drop_to_ports"`
	TcEventReportArea *ebpf.Map `ebpf:"tc_event_report_area"`
}

func (m *TCBpfMaps) Close() error {
	return _TCBpfClose(
		m.DropToAddrs,
		m.DropToIpport,
		m.DropToPorts,
		m.TcEventReportArea,
	)
}

// TCBpfPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to LoadTCBpfObjects or ebpf.CollectionSpec.LoadAndAssign.
type TCBpfPrograms struct {
	TcDurdurDropFunc *ebpf.Program `ebpf:"tc_durdur_drop_func"`
}

func (p *TCBpfPrograms) Close() error {
	return _TCBpfClose(
		p.TcDurdurDropFunc,
	)
}

func _TCBpfClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed tcbpf_bpfeb.o
var _TCBpfBytes []byte
