// Code generated by bpf2go; DO NOT EDIT.
//go:build mips || mips64 || ppc64 || s390x

package generated

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

type XDPBpfXdpEvent struct {
	Saddr uint32
	Sport uint16
	_     [2]byte
	Daddr uint32
	Dport uint16
	_     [2]byte
}

type XDPBpfXdpIpport struct {
	Addr  uint32
	Port  uint16
	Trash uint16
}

// LoadXDPBpf returns the embedded CollectionSpec for XDPBpf.
func LoadXDPBpf() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_XDPBpfBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load XDPBpf: %w", err)
	}

	return spec, err
}

// LoadXDPBpfObjects loads XDPBpf and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*XDPBpfObjects
//	*XDPBpfPrograms
//	*XDPBpfMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func LoadXDPBpfObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := LoadXDPBpf()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// XDPBpfSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type XDPBpfSpecs struct {
	XDPBpfProgramSpecs
	XDPBpfMapSpecs
}

// XDPBpfSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type XDPBpfProgramSpecs struct {
	XdpDurdurDropFunc *ebpf.ProgramSpec `ebpf:"xdp_durdur_drop_func"`
}

// XDPBpfMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type XDPBpfMapSpecs struct {
	DropFromAddrs      *ebpf.MapSpec `ebpf:"drop_from_addrs"`
	DropFromIpport     *ebpf.MapSpec `ebpf:"drop_from_ipport"`
	DropFromPorts      *ebpf.MapSpec `ebpf:"drop_from_ports"`
	XdpEventReportArea *ebpf.MapSpec `ebpf:"xdp_event_report_area"`
}

// XDPBpfObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to LoadXDPBpfObjects or ebpf.CollectionSpec.LoadAndAssign.
type XDPBpfObjects struct {
	XDPBpfPrograms
	XDPBpfMaps
}

func (o *XDPBpfObjects) Close() error {
	return _XDPBpfClose(
		&o.XDPBpfPrograms,
		&o.XDPBpfMaps,
	)
}

// XDPBpfMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to LoadXDPBpfObjects or ebpf.CollectionSpec.LoadAndAssign.
type XDPBpfMaps struct {
	DropFromAddrs      *ebpf.Map `ebpf:"drop_from_addrs"`
	DropFromIpport     *ebpf.Map `ebpf:"drop_from_ipport"`
	DropFromPorts      *ebpf.Map `ebpf:"drop_from_ports"`
	XdpEventReportArea *ebpf.Map `ebpf:"xdp_event_report_area"`
}

func (m *XDPBpfMaps) Close() error {
	return _XDPBpfClose(
		m.DropFromAddrs,
		m.DropFromIpport,
		m.DropFromPorts,
		m.XdpEventReportArea,
	)
}

// XDPBpfPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to LoadXDPBpfObjects or ebpf.CollectionSpec.LoadAndAssign.
type XDPBpfPrograms struct {
	XdpDurdurDropFunc *ebpf.Program `ebpf:"xdp_durdur_drop_func"`
}

func (p *XDPBpfPrograms) Close() error {
	return _XDPBpfClose(
		p.XdpDurdurDropFunc,
	)
}

func _XDPBpfClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed xdpbpf_bpfeb.o
var _XDPBpfBytes []byte
